{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport isIteratorLike from '@stdlib/assert-is-iterator-like' ;\nimport iteratorSymbol from '@stdlib/symbol-iterator' ;\nimport LinkedList from '@stdlib/utils-linked-list' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// FUNCTIONS //\n\n/**\n* Finds a node in a linked list hash based on a provided hash.\n*\n* @private\n* @param {LinkedList} hash - linked list hash\n* @param {*} v - hash to find\n* @returns {(Node|null)} hash node or null\n*/\nfunction getNode( hash, v ) {\n\tvar node = hash.first();\n\twhile ( node ) {\n\t\t// Each node value should be a three-element array: [ hash, value, count ]\n\t\tif ( node.value[ 0 ] === v ) {\n\t\t\treturn node;\n\t\t}\n\t\tnode = node.next;\n\t}\n\treturn null;\n}\n\n/**\n* Cleans a hash by removing nodes having counts below a provided threshold.\n*\n* @private\n* @param {LinkedList} hash - input hash\n* @param {PositiveInteger} threshold - count threshold\n* @returns {LinkedList} input hash\n*/\nfunction clean( hash, threshold ) {\n\tvar node = hash.first();\n\twhile ( node ) {\n\t\tif ( node.value[ 2 ] < threshold ) {\n\t\t\thash.remove( node );\n\t\t}\n\t\tnode = node.next;\n\t}\n\treturn hash;\n}\n\n/**\n* Finds the intersection of two or more iterators according to a hash function.\n*\n* @private\n* @param {Array<Iterator>} iterators - list of iterators\n* @param {Function} hashFcn - hash function\n* @param {*} thisArg - execution context\n* @returns {LinkedList} a linked list containing the intersection\n*/\nfunction intersection( iterators, hashFcn, thisArg ) {\n\tvar hash;\n\tvar it;\n\tvar hv;\n\tvar v;\n\tvar n;\n\tvar j;\n\n\t// Create a new linked list for storing the intersection:\n\thash = new LinkedList();\n\n\t// Find the intersection by first finding the unique values in the first iterator...\n\tit = iterators[ 0 ];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\thv = hashFcn.call( thisArg, v.value );\n\n\t\t// Determine if we have seen this hash before...\n\t\tn = getNode( hash, hv );\n\t\tif ( n === null ) {\n\t\t\t// First time we have seen this hash, so add to our set of hashes:\n\t\t\thash.push( [ hv, v.value, 1 ] );\n\t\t}\n\t}\n\t// Check whether we found any unique hashes:\n\tif ( hash.length === 0 ) {\n\t\treturn hash;\n\t}\n\t// Now that we have found an initial set of unique hashes, we need to consume each subsequent iterator, updating the count indicating how many iterators have contained an iterated value mapping to a given hash and removing any hashes from our initial set which were not found in *all* iterators...\n\tfor ( j = 1; j < iterators.length; j++ ) {\n\t\tit = iterators[ j ];\n\t\twhile ( true ) {\n\t\t\tv = it.next();\n\t\t\tif ( v.done ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\thv = hashFcn.call( thisArg, v.value );\n\t\t\tn = getNode( hash, hv );\n\t\t\tif ( n && n.value[ 2 ] === j ) {\n\t\t\t\t// Only increment a hash's counter the first time we see the hash per iterator...\n\t\t\t\tn.value[ 2 ] += 1;\n\t\t\t}\n\t\t}\n\t\t// Upon consuming an iterator, we need to remove any hashes whose count is less than the number of iterators seen thus far:\n\t\tclean( hash, j+1 );\n\n\t\t// Check whether we still have any unique hashes:\n\t\tif ( hash.length === 0 ) {\n\t\t\treturn hash;\n\t\t}\n\t\t// Move on to the next iterator...\n\t}\n\treturn hash;\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns the intersection of two or more iterators according to a hash function.\n*\n* @param {Iterator} iter0 - first input iterator\n* @param {...Iterator} iterator - subsequent iterators\n* @param {Function} hashFcn - hash function\n* @param {*} [thisArg] - execution context\n* @throws {Error} must provide two or more iterators\n* @throws {TypeError} must provide iterator protocol-compliant objects\n* @throws {TypeError} must provide a hash function\n* @returns {Iterator} iterator\n*\n* @example\n* import array2iterator from '@stdlib/array-to-iterator' ;\n*\n* function hashFcn( v ) {\n*     return v.toString();\n* }\n*\n* var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\n* var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );\n*\n* var iter = iterIntersectionByHash( it1, it2, hashFcn );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterIntersectionByHash() {\n\tvar iterators;\n\tvar iterator;\n\tvar hashFcn;\n\tvar thisArg;\n\tvar niter;\n\tvar iter;\n\tvar FLG;\n\tvar i;\n\n\titerators = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\tif ( isIteratorLike( arguments[ i ] ) ) {\n\t\t\titerators.push( arguments[ i ] );\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tniter = iterators.length;\n\tif ( niter < 2 ) {\n\t\tthrow new Error( 'insufficient arguments. Must provide two or more iterators.' );\n\t}\n\tif ( niter === arguments.length ) {\n\t\tthrow new Error( 'insufficient arguments. Must provide a hash function.' );\n\t}\n\tif ( arguments.length > niter+2 ) {\n\t\t// Addresses the case: fcn( it, it, null, it, it, hashFcn )\n\t\tthrow new TypeError( format( '0CU0M' ) );\n\t}\n\thashFcn = arguments[ i ];\n\tif ( !isFunction( hashFcn ) ) {\n\t\tthrow new TypeError( format( '0CU4P', hashFcn ) );\n\t}\n\tthisArg = arguments[ i+1 ];\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and all provided iterators are iterable, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\tif ( !isFunction( iterators[ i ][ iteratorSymbol ] ) ) {\n\t\t\t\tFLG = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( !FLG ) {\n\t\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t\t}\n\t}\n\tFLG = false;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* ## Notes\n\t*\n\t* -   The first time `next` is called, we must consume all source values in order to find the intersection (i.e., we \"lazily\" find the intersection, thus resulting in an upfront cost which is amortized over subsequent `next` calls).\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar hash;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Check if this is the first time `next` has been called...\n\t\tif ( iterator === void 0 ) {\n\t\t\thash = intersection( iterators, hashFcn, thisArg );\n\t\t\tif ( hash.length === 0 ) {\n\t\t\t\tFLG = true;\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\t\t\titerator = hash.iterator();\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\treturn {\n\t\t\t'value': v.value[ 1 ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < niter; i++ ) {\n\t\t\targs.push( iterators[ i ][ iteratorSymbol ]() );\n\t\t}\n\t\targs.push( hashFcn );\n\t\targs.push( thisArg );\n\t\treturn iterIntersectionByHash.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterIntersectionByHash;\n"],"names":["getNode","hash","v","node","first","value","next","clean","threshold","remove","intersection","iterators","hashFcn","thisArg","it","hv","n","j","LinkedList","done","call","push","length","iterIntersectionByHash","iterator","niter","iter","FLG","i","arguments","isIteratorLike","Error","TypeError","format","isFunction","setReadOnly","end","iteratorSymbol","factory","args","apply"],"mappings":"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"}